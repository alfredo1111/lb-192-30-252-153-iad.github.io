define(["require", "exports", "knockout", "underscore", "./QueryBuilderViewModel", "../DataTable/DataTableUtilities"], function (require, exports, ko, _, QueryBuilderViewModel_1, DataTableUtilities) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var QueryViewModel = /** @class */ (function () {
        function QueryViewModel(queryTablesTab) {
            var _this = this;
            this.topValueLimitMessage = "Please input a number between 0 and 1000.";
            this.queryBuilderViewModel = ko.observable();
            this.isHelperActive = ko.observable(true);
            this.isEditorActive = ko.observable(false);
            this.isExpanded = ko.observable(false);
            this.isWarningBox = ko.observable();
            this.queryText = ko.observable();
            this.topValue = ko.observable();
            this.selectText = ko.observableArray();
            this.unchangedText = ko.observable();
            this.unchangedSaveText = ko.observable();
            this.unchangedSaveTop = ko.observable();
            this.unchangedSaveSelect = ko.observableArray();
            this.savedQueryName = ko.observable();
            this.selectMessage = ko.observable();
            this.selectHelper = function () {
                _this.isHelperActive(true);
                _this.isEditorActive(false);
                DataTableUtilities.forceRecalculateTableSize();
            };
            this.selectEditor = function () {
                _this.setFilter();
                if (!_this.isEditorActive()) {
                    _this.unchangedText(_this.queryText());
                }
                _this.isEditorActive(true);
                _this.isHelperActive(false);
                DataTableUtilities.forceRecalculateTableSize();
            };
            this.toggleAdvancedOptions = function () {
                _this.isExpanded(!_this.isExpanded());
                if (_this.isExpanded()) {
                    _this.focusTopResult(true);
                }
                else {
                    _this.focusExpandIcon(true);
                }
                DataTableUtilities.forceRecalculateTableSize(); // Fix for 261924, forces the resize event so DataTableBindingManager will redo the calculation on table size.
            };
            this._getSelectedResults = function () {
                return _this.selectText();
            };
            this.setFilter = function () {
                var queryString = _this.isEditorActive()
                    ? _this.queryText()
                    : _this.queryTablesTab.container.isPreferredApiCassandra()
                        ? _this.queryBuilderViewModel().getCqlFilterFromClauses()
                        : _this.queryBuilderViewModel().getODataFilterFromClauses();
                var filter = queryString;
                _this.queryText(filter);
                return _this.queryText();
            };
            this.setSqlFilter = function () {
                var filter = _this.queryBuilderViewModel().getSqlFilterFromClauses();
                return filter;
            };
            this.setCqlFilter = function () {
                var filter = _this.queryBuilderViewModel().getCqlFilterFromClauses();
                return filter;
            };
            this.isHelperEnabled = ko.computed(function () {
                return _this.queryText() === _this.unchangedText() || _this.queryText() === null || _this.queryText() === "" || _this.isHelperActive();
            }).extend({
                notify: "always"
            });
            this.runQuery = function () {
                var filter = _this.setFilter();
                if (filter && !_this.queryTablesTab.container.isPreferredApiCassandra()) {
                    filter = filter.replace(/"/g, "'");
                }
                ;
                var top = _this.topValue();
                var selectOptions = _this._getSelectedResults();
                var select = selectOptions;
                _this._tableEntityListViewModel.tableQuery.filter = filter;
                _this._tableEntityListViewModel.tableQuery.top = top;
                _this._tableEntityListViewModel.tableQuery.select = select;
                _this._tableEntityListViewModel.oDataQuery(filter);
                _this._tableEntityListViewModel.sqlQuery(_this.setSqlFilter());
                _this._tableEntityListViewModel.cqlQuery(filter);
                return _this._tableEntityListViewModel.reloadTable(/*useSetting*/ false, /*resetHeaders*/ false);
            };
            this.clearQuery = function () {
                _this.queryText(null);
                _this.topValue(null);
                _this.selectText(null);
                _this.selectMessage("");
                // clears the queryBuilder and adds a new blank clause
                _this.queryBuilderViewModel().queryClauses.removeAll();
                _this.queryBuilderViewModel().addNewClause();
                _this._tableEntityListViewModel.tableQuery.filter = null;
                _this._tableEntityListViewModel.tableQuery.top = null;
                _this._tableEntityListViewModel.tableQuery.select = null;
                _this._tableEntityListViewModel.oDataQuery("");
                _this._tableEntityListViewModel.sqlQuery("SELECT * FROM c");
                _this._tableEntityListViewModel.cqlQuery("SELECT * FROM " + _this.queryTablesTab.collection.database.id() + "." + _this.queryTablesTab.collection.id());
                return _this._tableEntityListViewModel.reloadTable(false);
            };
            this.isSelected = ko.computed(function () {
                return !(_.isEmpty(_this.selectText()) || _this.selectText() === null);
            });
            this.queryTablesTab = queryTablesTab;
            this.id = "queryViewModel" + this.queryTablesTab.tabId;
            this._tableEntityListViewModel = queryTablesTab.tableEntityListViewModel();
            this.queryTextIsReadOnly = ko.computed(function () {
                return !_this.queryTablesTab.container.isPreferredApiCassandra();
            });
            var initialOptions = this._tableEntityListViewModel.headers;
            this.columnOptions = ko.observableArray(initialOptions);
            this.focusTopResult = ko.observable(false);
            this.focusExpandIcon = ko.observable(false);
            this.queryBuilderViewModel(new QueryBuilderViewModel_1.default(this, this._tableEntityListViewModel));
            this.isSaveEnabled = ko.pureComputed(function () {
                return ((_this.queryText() !== _this.unchangedSaveText()) || (_this.selectText() !== _this.unchangedSaveSelect()) ||
                    (_this.topValue() !== _this.unchangedSaveTop()));
            });
            this.queryBuilderViewModel().clauseArray.subscribe(function (value) {
                _this.setFilter();
            });
            this.isExceedingLimit = ko.computed(function () {
                var currentTopValue = _this.topValue();
                return currentTopValue < 0 || currentTopValue > 1000;
            });
            this.canRunQuery = ko.computed(function () {
                return !_this.isExceedingLimit();
            });
            this.hasQueryError = ko.computed(function () {
                return !!_this._tableEntityListViewModel.queryErrorMessage();
            });
            this.queryErrorMessage = ko.computed(function () {
                return _this._tableEntityListViewModel.queryErrorMessage();
            });
        }
        QueryViewModel.prototype.selectQueryOptions = function () {
            this.queryTablesTab.container.querySelectPane.queryViewModel = this;
            this.queryTablesTab.container.querySelectPane.open();
            return null;
        };
        QueryViewModel.prototype.getSelectMessage = function () {
            if (_.isEmpty(this.selectText()) || this.selectText() === null) {
                this.selectMessage("");
            }
            else {
                this.selectMessage(this.selectText().length + " of " + this.columnOptions().length + " columns selected.");
            }
        };
        QueryViewModel.prototype.setCheckToSave = function () {
            this.unchangedSaveText(this.setFilter());
            this.unchangedSaveTop(this.topValue());
            this.unchangedSaveSelect(this.selectText());
            this.isSaveEnabled(false);
        };
        QueryViewModel.prototype.checkIfBuilderChanged = function (clause) {
            this.setFilter();
        };
        return QueryViewModel;
    }());
    exports.default = QueryViewModel;
});
ÜÅ>^£m      [Õ¾õ[Õ¾ü?§¶Ï[×km   V    :https://cosmos.azure.com/built/Explorer/Tables/QueryBuilder/QueryViewModel.js?v=1.0.1 necko:classified 1 strongly-framed 1 security-info FnhllAKWRHGAlo+ESXykKAAAAAAAAAAAwAAAAAAAAEaphjojH6pBabDSgSnsfLHeAAQAAgAAAAAAAAAAAAAAAAAAAAAB4vFIJp5wRkeyPxAQ9RJGKPqbqVvKO0mKuIl8ec8o/uhmCjImkVxP+7sgiYWmMt8FvcOXmlQiTNWFiWlrbpbqgwAAAAAAAAOMMIIDiDCCAnCgAwIBAgIERTJgUjANBgkqhkiG9w0BAQsFADCBijEUMBIGA1UEBhMLUG9ydFN3aWdnZXIxFDASBgNVBAgTC1BvcnRTd2lnZ2VyMRQwEgYDVQQHEwtQb3J0U3dpZ2dlcjEUMBIGA1UEChMLUG9ydFN3aWdnZXIxFzAVBgNVBAsTDlBvcnRTd2lnZ2VyIENBMRcwFQYDVQQDEw5Qb3J0U3dpZ2dlciBDQTAeFw0xNDEwMjgxMzEyMTBaFw0zODEwMjgxMzEyMTBaMGAxFDASBgNVBAYTC1BvcnRTd2lnZ2VyMRQwEgYDVQQKEwtQb3J0U3dpZ2dlcjEXMBUGA1UECxMOUG9ydFN3aWdnZXIgQ0ExGTAXBgNVBAMTEGNvc21vcy5henVyZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCKn7emKINsnWqPZ+C/VsqbQf/l4NsmIh34bXBR0xdNg9bfb+xcoghRlmbPjhZ/A26A2gJ6Rrg2d0GGMLpbqA8nTlRRGXEAD39321zk4ye09ElXClvqguGqdqOJpPQ05DPFD6wSOq+KVAEblE5bi+LMqBLipDERzgUe7xzeqVVk0i0ldh9yQOIk3YuzcBR9igSEuw5qladmMYvXKHYM9YZz0R7axMc8xAtadK7C9KfFPfEI5LS2nhmy4vBrTgFyYhfkEvKfmIj6HTX0ISFCAC2llcBLpEDcuiW76tAHp1pXDeWtSeaV36AeOctdleVgrbmsGs3fu6ppuRcWjEZUbjE3AgMBAAGjHzAdMBsGA1UdEQQUMBKCEGNvc21vcy5henVyZS5jb20wDQYJKoZIhvcNAQELBQADggEBABYikT6Y5YgJJ4IVJldlFDF5MKxp26YegXhvT8EmAbgr0yQBIlY2DtKEiHf7Q8wRoJ9y5Ajst1D7HmRba+XLjS6s3IHJ7gtuvc3fZj9MPKpbqSKRfHDB8bDOVIzmjBseg2BqckHTkcYak3b/pTWCTqKHM3LxKsDwN8F3HNQ2pY4d5ma2kR1EtWdTpRiIbir3QxJDcWVp8CgHONZcoMn33NNwnWWjAQMX6d8e1CPuBZi0t+myaYduCqPgKKox9qMXSubF6uifQkAJ5RdLZrZ2pghENA/4r1oz51wqEmpjPsStSUxRPwJ6wJrB4gwGtX7++ZHLjAaNrTSUCGwIOlAT4LnALwEDAAAAAAEBAAAAAA== request-method GET request-Accept-Encoding gzip, deflate, br response-head HTTP/1.1 200 OK
Content-Length: 8673
Content-Type: application/x-javascript
Last-Modified: Tue, 16 Oct 2018 01:58:30 GMT
Accept-Ranges: bytes
Etag: "06753bcf364d41:0"
Vary: Accept-Encoding
Server: Microsoft-IIS/10.0
X-Powered-By: ASP.NET
Date: Sun, 28 Oct 2018 18:39:56 GMT
 original-response-headers Content-Length: 8673
Content-Type: application/x-javascript
Last-Modified: Tue, 16 Oct 2018 01:58:30 GMT
Accept-Ranges: bytes
Etag: "06753bcf364d41:0"
Vary: Accept-Encoding
Server: Microsoft-IIS/10.0
X-Powered-By: ASP.NET
Date: Sun, 28 Oct 2018 18:39:56 GMT
Connection: close
 uncompressed-len 0 net-response-time-onstart 7304 net-response-time-onstop 7304   !á