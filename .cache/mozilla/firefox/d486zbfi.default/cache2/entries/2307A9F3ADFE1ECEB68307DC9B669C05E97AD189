var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports", "../../scripts/Framework/Util/Datetime", "./FilterViewModel", "../../_generated/Framework", "../../scripts/Framework/Util/Log", "../../scripts/Framework/Util/Util"], function (require, exports, DateTimeUtil, Filter, Framework, Log, Util) {
    "use strict";
    var logger = Log.getLogger({
        loggerName: "DateTimeFilterViewModel"
    });
    var DateTimeFilterViewModel = (function (_super) {
        __extends(DateTimeFilterViewModel, _super);
        function DateTimeFilterViewModel(lifetimeManager, filterDetails) {
            var _this = this;
            _super.call(this, lifetimeManager, filterDetails);
            this.isActiveFilter = function () {
                return Util.koPropertyHasValue(_this._filterState);
            };
            this.initializeView = function () {
                _this.dateTimePickerElement.datetimepicker({
                    minDateTime: DateTimeUtil.convertAsStringFromUTCToLocal(_this.viewContext.dateRange().startDate),
                    maxDateTime: DateTimeUtil.convertAsStringFromUTCToLocal(_this.viewContext.dateRange().endDate),
                    timeFormat: "hh:mm tt",
                    showOtherMonths: true
                });
                _this.dateTimePickerElement.datetimepicker("setDate", DateTimeUtil.convertAsStringFromUTCToLocal(_this.defaultDate));
            };
            this.updateViewState = function () {
                _super.prototype.updateViewStateBase.call(_this);
                var newMinDateTime;
                var newMaxDateTime;
                var globalStartDate = _this.viewContext.dateRange().startDate;
                var globalEndDate = _this.viewContext.dateRange().endDate;
                var windowStartFilter = _this.monitoringViewHandler.getSelectedView().filter.filterState().windowStart;
                var windowEndFilter = _this.monitoringViewHandler.getSelectedView().filter.filterState().windowEnd;
                var selectedDate = DateTimeUtil.convertAsStringFromLocalToUTC(_this.dateTimePickerElement.datetimepicker("getDate"));
                switch (_this.column) {
                    case _this.extendedProperties.WindowStart:
                        newMinDateTime = globalStartDate;
                        newMaxDateTime = Util.koPropertyHasValue(windowEndFilter) &&
                            windowEndFilter().getTime() < globalEndDate.getTime() &&
                            windowEndFilter().getTime() > globalStartDate.getTime() ?
                            windowEndFilter() : globalEndDate;
                        _this.setDateTimeLimits(newMinDateTime, newMaxDateTime);
                        if (selectedDate.getTime() < globalStartDate.getTime() || selectedDate.getTime() > globalEndDate.getTime()) {
                            windowStartFilter(null);
                            _this.dateTimePickerElement.datetimepicker("setDate", DateTimeUtil.convertAsStringFromUTCToLocal(globalStartDate));
                        }
                        break;
                    case _this.extendedProperties.WindowEnd:
                        newMinDateTime = Util.koPropertyHasValue(windowStartFilter) &&
                            windowStartFilter().getTime() > globalStartDate.getTime() &&
                            windowStartFilter().getTime() < globalEndDate.getTime() ?
                            windowStartFilter() : globalStartDate;
                        newMaxDateTime = globalEndDate;
                        _this.setDateTimeLimits(newMinDateTime, newMaxDateTime);
                        if (selectedDate.getTime() < globalStartDate.getTime() || selectedDate.getTime() > globalEndDate.getTime()) {
                            windowEndFilter(null);
                            _this.dateTimePickerElement.datetimepicker("setDate", DateTimeUtil.convertAsStringFromUTCToLocal(globalEndDate));
                        }
                        break;
                    default:
                        logger.logDebug("updateViewState - column unrecognized: {0}".format(_this.column));
                }
            };
            this.showFlyout = function () {
                _this.updateViewState();
                _super.prototype.showFlyoutBase.call(_this);
                _this.previousDate = DateTimeUtil.convertAsStringFromLocalToUTC(_this.dateTimePickerElement.datetimepicker("getDate"));
            };
            this.okClicked = function () {
                _this.flyoutControl.hide();
                _this.currentDate = DateTimeUtil.convertAsStringFromLocalToUTC(_this.dateTimePickerElement.datetimepicker("getDate"));
                if (_this.currentDate.getTime() === _this.previousDate.getTime() &&
                    _this._filterState() &&
                    _this.currentDate.getTime() === _this._filterState().getTime()) {
                    return;
                }
                switch (_this.column) {
                    case _this.extendedProperties.WindowStart:
                        if (_this.currentDate.getTime() !== _this.viewContext.dateRange().startDate.getTime()) {
                            _this._updateFilterState(_this.currentDate);
                        }
                        break;
                    case _this.extendedProperties.WindowEnd:
                        if (_this.currentDate.getTime() !== _this.viewContext.dateRange().endDate.getTime()) {
                            _this._updateFilterState(_this.currentDate);
                        }
                        break;
                    default:
                        logger.logError("Unexpected column name: " + _this.column + " for adding to filterState.");
                }
            };
            this.cancelClicked = function () {
                _this.flyoutControl.hide();
                _this.dateTimePickerElement.datetimepicker("setDate", DateTimeUtil.convertAsStringFromUTCToLocal(_this.previousDate));
            };
            this.monitoringViewSubscription = {
                name: DateTimeFilterViewModel.className,
                callback: this.updateViewState
            };
            this.monitoringViewHandler.register(this.monitoringViewSubscription);
            this._filterState = this.monitoringViewHandler.getSelectedView().filter.mapDateTimeColumnToFilterState(this.column);
        }
        DateTimeFilterViewModel.prototype.setDateTimeLimits = function (newMinDateTime, newMaxDateTime) {
            this.dateTimePickerElement.datetimepicker("option", "minDateTime", DateTimeUtil.convertAsStringFromUTCToLocal(newMinDateTime));
            this.dateTimePickerElement.datepicker("option", "minDate", DateTimeUtil.convertAsStringFromUTCToLocal(newMinDateTime));
            this.dateTimePickerElement.datetimepicker("option", "maxDateTime", DateTimeUtil.convertAsStringFromUTCToLocal(newMaxDateTime));
            this.dateTimePickerElement.datepicker("option", "maxDate", DateTimeUtil.convertAsStringFromUTCToLocal(newMaxDateTime));
        };
        DateTimeFilterViewModel.prototype._updateFilterState = function (newDate) {
            if (newDate) {
                this._filterState(newDate);
                this.monitoringViewHandler.pushNotification();
            }
        };
        DateTimeFilterViewModel.className = Framework.DataConstants.dateTimeFilterViewModel;
        DateTimeFilterViewModel.windowStartDateTimePickerSelector = "adf-filterFlyoutStartDateTimePicker";
        DateTimeFilterViewModel.windowEndDateTimePickerSelector = "adf-filterFlyoutEndDateTimePicker";
        return DateTimeFilterViewModel;
    }(Filter.FilterViewModel));
    exports.DateTimeFilterViewModel = DateTimeFilterViewModel;
});
//# sourceMappingURL=DateTimeFilterViewModel.js.map`œç¢Ù      [÷˚[÷˛?ßÁY[ÿÂT   ì    :https://datafactory-endpoint.azureedge.net/node_modules/@ms-atlas-module/datastudio-datafactory/views/Edit/DateTimeFilterViewModel.js?v=1.0.4164.1 necko:classified 1 strongly-framed 1 security-info FnhllAKWRHGAlo+ESXykKAAAAAAAAAAAwAAAAAAAAEaphjojH6pBabDSgSnsfLHeAAQAAgAAAAAAAAAAAAAAAAAAAAAB4vFIJp5wRkeyPxAQ9RJGKPqbqVvKO0mKuIl8ec8o/uhmCjImkVxP+7sgiYWmMt8FvcOXmlQiTNWFiWlrbpbqgwAAAAAAAAOwMIIDrDCCApSgAwIBAgIERTJgTjANBgkqhkiG9w0BAQsFADCBijEUMBIGA1UEBhMLUG9ydFN3aWdnZXIxFDASBgNVBAgTC1BvcnRTd2lnZ2VyMRQwEgYDVQQHEwtQb3J0U3dpZ2dlcjEUMBIGA1UEChMLUG9ydFN3aWdnZXIxFzAVBgNVBAsTDlBvcnRTd2lnZ2VyIENBMRcwFQYDVQQDEw5Qb3J0U3dpZ2dlciBDQTAeFw0xNDEwMjgxMzEyMTBaFw0zODEwMjgxMzEyMTBaMHIxFDASBgNVBAYTC1BvcnRTd2lnZ2VyMRQwEgYDVQQKEwtQb3J0U3dpZ2dlcjEXMBUGA1UECxMOUG9ydFN3aWdnZXIgQ0ExKzApBgNVBAMTImRhdGFmYWN0b3J5LWVuZHBvaW50LmF6dXJlZWRnZS5uZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCKn7emKINsnWqPZ+C/VsqbQf/l4NsmIh34bXBR0xdNg9bfb+xcoghRlmbPjhZ/A26A2gJ6Rrg2d0GGMLpbqA8nTlRRGXEAD39321zk4ye09ElXClvqguGqdqOJpPQ05DPFD6wSOq+KVAEblE5bi+LMqBLipDERzgUe7xzeqVVk0i0ldh9yQOIk3YuzcBR9igSEuw5qladmMYvXKHYM9YZz0R7axMc8xAtadK7C9KfFPfEI5LS2nhmy4vBrTgFyYhfkEvKfmIj6HTX0ISFCAC2llcBLpEDcuiW76tAHp1pXDeWtSeaV36AeOctdleVgrbmsGs3fu6ppuRcWjEZUbjE3AgMBAAGjMTAvMC0GA1UdEQQmMCSCImRhdGFmYWN0b3J5LWVuZHBvaW50LmF6dXJlZWRnZS5uZXQwDQYJKoZIhvcNAQELBQADggEBAD5nTga0zudMitI/u0TfDiXUvU9MHWtnM1QsCR52LG8/P3zHlMPdW01WDRZUWTzCGka9MJHNjppqHPNsxY69i49nAksLYLzG7nK57bfwfvJQH/v27QUFGFMmKZNtpz+523V8pi+RJR9/DcmY0SQslyt1+Cj1SViKKOJYr8DiCwrYSUxWRp0XCM6ACnyoVhILHxIff7DQUE7Qq8eLX2UMcsrHHrlmbWpSCkEMtikIahIK4D2jjHj/CFWVzmKApRGZHRCenGUCvwPc6+mdefq6dna4yuo/9sC8unizedWeSL+sIj+Qxy7egEU4w3ZyvM8xUIozSNHY/VVwXW5ypPYqSlDALwEDAAAAAAEBAAAAAA== request-method GET request-Accept-Encoding gzip, deflate, br response-head HTTP/1.1 200 OK
Content-Type: application/javascript
Last-Modified: Sat, 06 Oct 2018 23:13:01 GMT
Accept-Ranges: bytes
Etag: "4f66621ca5dd41:0"
Server: Microsoft-IIS/8.5
X-Frame-Options: AllowAll
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Strict-Transport-Security: max-age=15724800; includeSubDomains
Access-Control-Allow-Origin: *
Vary: Accept-Encoding
Content-Length: 8132
Date: Sun, 28 Oct 2018 18:50:38 GMT
 original-response-headers Content-Type: application/javascript
Last-Modified: Sat, 06 Oct 2018 23:13:01 GMT
Accept-Ranges: bytes
Etag: "4f66621ca5dd41:0"
Server: Microsoft-IIS/8.5
X-Frame-Options: AllowAll
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Strict-Transport-Security: max-age=15724800; includeSubDomains
Access-Control-Allow-Origin: *
Vary: Accept-Encoding
Content-Length: 8132
Date: Sun, 28 Oct 2018 18:50:38 GMT
Connection: close
 uncompressed-len 0 net-response-time-onstart 3357 net-response-time-onstop 3358   ƒ